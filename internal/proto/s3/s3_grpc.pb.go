// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: s3.proto

package s3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SubscribeNotifications(ctx context.Context, opts ...grpc.CallOption) (NotificationService_SubscribeNotificationsClient, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SubscribeNotifications(ctx context.Context, opts ...grpc.CallOption) (NotificationService_SubscribeNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], "/notificationpubsub.NotificationService/subscribeNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceSubscribeNotificationsClient{stream}
	return x, nil
}

type NotificationService_SubscribeNotificationsClient interface {
	Send(*RequestStream) error
	Recv() (*NotificationStream, error)
	grpc.ClientStream
}

type notificationServiceSubscribeNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationServiceSubscribeNotificationsClient) Send(m *RequestStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notificationServiceSubscribeNotificationsClient) Recv() (*NotificationStream, error) {
	m := new(NotificationStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	SubscribeNotifications(NotificationService_SubscribeNotificationsServer) error
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) SubscribeNotifications(NotificationService_SubscribeNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SubscribeNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationServiceServer).SubscribeNotifications(&notificationServiceSubscribeNotificationsServer{stream})
}

type NotificationService_SubscribeNotificationsServer interface {
	Send(*NotificationStream) error
	Recv() (*RequestStream, error)
	grpc.ServerStream
}

type notificationServiceSubscribeNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationServiceSubscribeNotificationsServer) Send(m *NotificationStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notificationServiceSubscribeNotificationsServer) Recv() (*RequestStream, error) {
	m := new(RequestStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificationpubsub.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribeNotifications",
			Handler:       _NotificationService_SubscribeNotifications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "s3.proto",
}
