// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: qpuapi.proto

package qpuapi

import (
	context "context"
	qpuextapi "github.com/dvasilas/proteus/internal/proto/qpuextapi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QPUAPIClient is the client API for QPUAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QPUAPIClient interface {
	// The QPU Query API.
	Query(ctx context.Context, opts ...grpc.CallOption) (QPUAPI_QueryClient, error)
	// QueryUnary is a simplification of Query that returns a single response
	// instead of a stream.
	// It is used to simplify the client code for clients that have queries
	// that look like SELECT .. FROM .. WHERE .. LIMIT N
	// and so do not care about streaming anyways.
	QueryUnary(ctx context.Context, in *qpuextapi.QueryReq, opts ...grpc.CallOption) (*qpuextapi.QueryResp, error)
	QueryUnary1(ctx context.Context, in *qpuextapi.QueryReq, opts ...grpc.CallOption) (*qpuextapi.QueryResp1, error)
	QuerySubscribe(ctx context.Context, in *qpuextapi.QueryReq, opts ...grpc.CallOption) (QPUAPI_QuerySubscribeClient, error)
	// The QPU GetConfig API.
	// Used by a 'parent' QPU to request the configuration and query processing
	// capabilities of a 'child` QPU.
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// QPUs implemement a mechanism for measuring the traffic between them
	// (each QPU measuring the total size of outbound messages)
	// GetDataTransfer was used for getting this measuremrents.
	// Disabled for now.
	// rpc GetDataTransfer(GetDataRequest) returns (DataTransferResponse) {}
	// rpc QueryNoOp(NoOpReq) returns (NoOpResp) {}
	// rpc QueryArgs(QueryRequest) returns (QueryResponse) {}
	GetMetrics(ctx context.Context, in *qpuextapi.MetricsRequest, opts ...grpc.CallOption) (*qpuextapi.MetricsResponse, error)
	GetWriteLog(ctx context.Context, in *qpuextapi.GetWriteLogReq, opts ...grpc.CallOption) (QPUAPI_GetWriteLogClient, error)
	LobstersFrontpage(ctx context.Context, in *qpuextapi.LobFrontpageReq, opts ...grpc.CallOption) (*qpuextapi.LobFrontpageResp, error)
	LobstersStoryVote(ctx context.Context, in *qpuextapi.LobStoryVoteReq, opts ...grpc.CallOption) (*qpuextapi.LobStoryVoteResp, error)
	LobstersStoryVoteInsert(ctx context.Context, in *qpuextapi.LobStoryVoteReq, opts ...grpc.CallOption) (*qpuextapi.LobStoryVoteResp, error)
}

type qPUAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewQPUAPIClient(cc grpc.ClientConnInterface) QPUAPIClient {
	return &qPUAPIClient{cc}
}

func (c *qPUAPIClient) Query(ctx context.Context, opts ...grpc.CallOption) (QPUAPI_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &QPUAPI_ServiceDesc.Streams[0], "/qpuapi.QPUAPI/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &qPUAPIQueryClient{stream}
	return x, nil
}

type QPUAPI_QueryClient interface {
	Send(*RequestStreamRecord) error
	Recv() (*ResponseStreamRecord, error)
	grpc.ClientStream
}

type qPUAPIQueryClient struct {
	grpc.ClientStream
}

func (x *qPUAPIQueryClient) Send(m *RequestStreamRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *qPUAPIQueryClient) Recv() (*ResponseStreamRecord, error) {
	m := new(ResponseStreamRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qPUAPIClient) QueryUnary(ctx context.Context, in *qpuextapi.QueryReq, opts ...grpc.CallOption) (*qpuextapi.QueryResp, error) {
	out := new(qpuextapi.QueryResp)
	err := c.cc.Invoke(ctx, "/qpuapi.QPUAPI/QueryUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) QueryUnary1(ctx context.Context, in *qpuextapi.QueryReq, opts ...grpc.CallOption) (*qpuextapi.QueryResp1, error) {
	out := new(qpuextapi.QueryResp1)
	err := c.cc.Invoke(ctx, "/qpuapi.QPUAPI/QueryUnary1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) QuerySubscribe(ctx context.Context, in *qpuextapi.QueryReq, opts ...grpc.CallOption) (QPUAPI_QuerySubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &QPUAPI_ServiceDesc.Streams[1], "/qpuapi.QPUAPI/QuerySubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &qPUAPIQuerySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QPUAPI_QuerySubscribeClient interface {
	Recv() (*ResponseStreamRecord, error)
	grpc.ClientStream
}

type qPUAPIQuerySubscribeClient struct {
	grpc.ClientStream
}

func (x *qPUAPIQuerySubscribeClient) Recv() (*ResponseStreamRecord, error) {
	m := new(ResponseStreamRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qPUAPIClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/qpuapi.QPUAPI/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) GetMetrics(ctx context.Context, in *qpuextapi.MetricsRequest, opts ...grpc.CallOption) (*qpuextapi.MetricsResponse, error) {
	out := new(qpuextapi.MetricsResponse)
	err := c.cc.Invoke(ctx, "/qpuapi.QPUAPI/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) GetWriteLog(ctx context.Context, in *qpuextapi.GetWriteLogReq, opts ...grpc.CallOption) (QPUAPI_GetWriteLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &QPUAPI_ServiceDesc.Streams[2], "/qpuapi.QPUAPI/GetWriteLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &qPUAPIGetWriteLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QPUAPI_GetWriteLogClient interface {
	Recv() (*qpuextapi.WriteLogOp, error)
	grpc.ClientStream
}

type qPUAPIGetWriteLogClient struct {
	grpc.ClientStream
}

func (x *qPUAPIGetWriteLogClient) Recv() (*qpuextapi.WriteLogOp, error) {
	m := new(qpuextapi.WriteLogOp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qPUAPIClient) LobstersFrontpage(ctx context.Context, in *qpuextapi.LobFrontpageReq, opts ...grpc.CallOption) (*qpuextapi.LobFrontpageResp, error) {
	out := new(qpuextapi.LobFrontpageResp)
	err := c.cc.Invoke(ctx, "/qpuapi.QPUAPI/LobstersFrontpage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) LobstersStoryVote(ctx context.Context, in *qpuextapi.LobStoryVoteReq, opts ...grpc.CallOption) (*qpuextapi.LobStoryVoteResp, error) {
	out := new(qpuextapi.LobStoryVoteResp)
	err := c.cc.Invoke(ctx, "/qpuapi.QPUAPI/LobstersStoryVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qPUAPIClient) LobstersStoryVoteInsert(ctx context.Context, in *qpuextapi.LobStoryVoteReq, opts ...grpc.CallOption) (*qpuextapi.LobStoryVoteResp, error) {
	out := new(qpuextapi.LobStoryVoteResp)
	err := c.cc.Invoke(ctx, "/qpuapi.QPUAPI/LobstersStoryVoteInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QPUAPIServer is the server API for QPUAPI service.
// All implementations must embed UnimplementedQPUAPIServer
// for forward compatibility
type QPUAPIServer interface {
	// The QPU Query API.
	Query(QPUAPI_QueryServer) error
	// QueryUnary is a simplification of Query that returns a single response
	// instead of a stream.
	// It is used to simplify the client code for clients that have queries
	// that look like SELECT .. FROM .. WHERE .. LIMIT N
	// and so do not care about streaming anyways.
	QueryUnary(context.Context, *qpuextapi.QueryReq) (*qpuextapi.QueryResp, error)
	QueryUnary1(context.Context, *qpuextapi.QueryReq) (*qpuextapi.QueryResp1, error)
	QuerySubscribe(*qpuextapi.QueryReq, QPUAPI_QuerySubscribeServer) error
	// The QPU GetConfig API.
	// Used by a 'parent' QPU to request the configuration and query processing
	// capabilities of a 'child` QPU.
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	// QPUs implemement a mechanism for measuring the traffic between them
	// (each QPU measuring the total size of outbound messages)
	// GetDataTransfer was used for getting this measuremrents.
	// Disabled for now.
	// rpc GetDataTransfer(GetDataRequest) returns (DataTransferResponse) {}
	// rpc QueryNoOp(NoOpReq) returns (NoOpResp) {}
	// rpc QueryArgs(QueryRequest) returns (QueryResponse) {}
	GetMetrics(context.Context, *qpuextapi.MetricsRequest) (*qpuextapi.MetricsResponse, error)
	GetWriteLog(*qpuextapi.GetWriteLogReq, QPUAPI_GetWriteLogServer) error
	LobstersFrontpage(context.Context, *qpuextapi.LobFrontpageReq) (*qpuextapi.LobFrontpageResp, error)
	LobstersStoryVote(context.Context, *qpuextapi.LobStoryVoteReq) (*qpuextapi.LobStoryVoteResp, error)
	LobstersStoryVoteInsert(context.Context, *qpuextapi.LobStoryVoteReq) (*qpuextapi.LobStoryVoteResp, error)
	mustEmbedUnimplementedQPUAPIServer()
}

// UnimplementedQPUAPIServer must be embedded to have forward compatible implementations.
type UnimplementedQPUAPIServer struct {
}

func (UnimplementedQPUAPIServer) Query(QPUAPI_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQPUAPIServer) QueryUnary(context.Context, *qpuextapi.QueryReq) (*qpuextapi.QueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnary not implemented")
}
func (UnimplementedQPUAPIServer) QueryUnary1(context.Context, *qpuextapi.QueryReq) (*qpuextapi.QueryResp1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnary1 not implemented")
}
func (UnimplementedQPUAPIServer) QuerySubscribe(*qpuextapi.QueryReq, QPUAPI_QuerySubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method QuerySubscribe not implemented")
}
func (UnimplementedQPUAPIServer) GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedQPUAPIServer) GetMetrics(context.Context, *qpuextapi.MetricsRequest) (*qpuextapi.MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedQPUAPIServer) GetWriteLog(*qpuextapi.GetWriteLogReq, QPUAPI_GetWriteLogServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWriteLog not implemented")
}
func (UnimplementedQPUAPIServer) LobstersFrontpage(context.Context, *qpuextapi.LobFrontpageReq) (*qpuextapi.LobFrontpageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LobstersFrontpage not implemented")
}
func (UnimplementedQPUAPIServer) LobstersStoryVote(context.Context, *qpuextapi.LobStoryVoteReq) (*qpuextapi.LobStoryVoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LobstersStoryVote not implemented")
}
func (UnimplementedQPUAPIServer) LobstersStoryVoteInsert(context.Context, *qpuextapi.LobStoryVoteReq) (*qpuextapi.LobStoryVoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LobstersStoryVoteInsert not implemented")
}
func (UnimplementedQPUAPIServer) mustEmbedUnimplementedQPUAPIServer() {}

// UnsafeQPUAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QPUAPIServer will
// result in compilation errors.
type UnsafeQPUAPIServer interface {
	mustEmbedUnimplementedQPUAPIServer()
}

func RegisterQPUAPIServer(s grpc.ServiceRegistrar, srv QPUAPIServer) {
	s.RegisterService(&QPUAPI_ServiceDesc, srv)
}

func _QPUAPI_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QPUAPIServer).Query(&qPUAPIQueryServer{stream})
}

type QPUAPI_QueryServer interface {
	Send(*ResponseStreamRecord) error
	Recv() (*RequestStreamRecord, error)
	grpc.ServerStream
}

type qPUAPIQueryServer struct {
	grpc.ServerStream
}

func (x *qPUAPIQueryServer) Send(m *ResponseStreamRecord) error {
	return x.ServerStream.SendMsg(m)
}

func (x *qPUAPIQueryServer) Recv() (*RequestStreamRecord, error) {
	m := new(RequestStreamRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QPUAPI_QueryUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(qpuextapi.QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).QueryUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpuapi.QPUAPI/QueryUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).QueryUnary(ctx, req.(*qpuextapi.QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_QueryUnary1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(qpuextapi.QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).QueryUnary1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpuapi.QPUAPI/QueryUnary1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).QueryUnary1(ctx, req.(*qpuextapi.QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_QuerySubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(qpuextapi.QueryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QPUAPIServer).QuerySubscribe(m, &qPUAPIQuerySubscribeServer{stream})
}

type QPUAPI_QuerySubscribeServer interface {
	Send(*ResponseStreamRecord) error
	grpc.ServerStream
}

type qPUAPIQuerySubscribeServer struct {
	grpc.ServerStream
}

func (x *qPUAPIQuerySubscribeServer) Send(m *ResponseStreamRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _QPUAPI_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpuapi.QPUAPI/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(qpuextapi.MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpuapi.QPUAPI/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).GetMetrics(ctx, req.(*qpuextapi.MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_GetWriteLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(qpuextapi.GetWriteLogReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QPUAPIServer).GetWriteLog(m, &qPUAPIGetWriteLogServer{stream})
}

type QPUAPI_GetWriteLogServer interface {
	Send(*qpuextapi.WriteLogOp) error
	grpc.ServerStream
}

type qPUAPIGetWriteLogServer struct {
	grpc.ServerStream
}

func (x *qPUAPIGetWriteLogServer) Send(m *qpuextapi.WriteLogOp) error {
	return x.ServerStream.SendMsg(m)
}

func _QPUAPI_LobstersFrontpage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(qpuextapi.LobFrontpageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).LobstersFrontpage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpuapi.QPUAPI/LobstersFrontpage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).LobstersFrontpage(ctx, req.(*qpuextapi.LobFrontpageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_LobstersStoryVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(qpuextapi.LobStoryVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).LobstersStoryVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpuapi.QPUAPI/LobstersStoryVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).LobstersStoryVote(ctx, req.(*qpuextapi.LobStoryVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QPUAPI_LobstersStoryVoteInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(qpuextapi.LobStoryVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QPUAPIServer).LobstersStoryVoteInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpuapi.QPUAPI/LobstersStoryVoteInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QPUAPIServer).LobstersStoryVoteInsert(ctx, req.(*qpuextapi.LobStoryVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QPUAPI_ServiceDesc is the grpc.ServiceDesc for QPUAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QPUAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qpuapi.QPUAPI",
	HandlerType: (*QPUAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUnary",
			Handler:    _QPUAPI_QueryUnary_Handler,
		},
		{
			MethodName: "QueryUnary1",
			Handler:    _QPUAPI_QueryUnary1_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _QPUAPI_GetConfig_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _QPUAPI_GetMetrics_Handler,
		},
		{
			MethodName: "LobstersFrontpage",
			Handler:    _QPUAPI_LobstersFrontpage_Handler,
		},
		{
			MethodName: "LobstersStoryVote",
			Handler:    _QPUAPI_LobstersStoryVote_Handler,
		},
		{
			MethodName: "LobstersStoryVoteInsert",
			Handler:    _QPUAPI_LobstersStoryVoteInsert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _QPUAPI_Query_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "QuerySubscribe",
			Handler:       _QPUAPI_QuerySubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetWriteLog",
			Handler:       _QPUAPI_GetWriteLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "qpuapi.proto",
}
