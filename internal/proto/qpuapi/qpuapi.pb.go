// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: qpuapi.proto

package qpuapi

import (
	qpu "github.com/dvasilas/proteus/internal/proto/qpu"
	qpuextapi "github.com/dvasilas/proteus/internal/proto/qpuextapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderBy_Order int32

const (
	OrderBy_ASC  OrderBy_Order = 0
	OrderBy_DESC OrderBy_Order = 1
)

// Enum value maps for OrderBy_Order.
var (
	OrderBy_Order_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	OrderBy_Order_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x OrderBy_Order) Enum() *OrderBy_Order {
	p := new(OrderBy_Order)
	*p = x
	return p
}

func (x OrderBy_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_qpuapi_proto_enumTypes[0].Descriptor()
}

func (OrderBy_Order) Type() protoreflect.EnumType {
	return &file_qpuapi_proto_enumTypes[0]
}

func (x OrderBy_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy_Order.Descriptor instead.
func (OrderBy_Order) EnumDescriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{7, 0}
}

type ResponseStreamRecord_StreamRecordType int32

const (
	// Not used for now.
	ResponseStreamRecord_UPDATEOP ResponseStreamRecord_StreamRecordType = 0
	// Respresents an update.
	// udpate = (value_before_update, value_after_update)
	ResponseStreamRecord_UPDATEDELTA ResponseStreamRecord_StreamRecordType = 1
	// Represents the state of a data item.
	ResponseStreamRecord_STATE ResponseStreamRecord_StreamRecordType = 2
	// Sometimes we exchange heartbeats in long-lived streams to make sure
	// the two parts are still alive and the connection is open.
	ResponseStreamRecord_HEARTBEAT ResponseStreamRecord_StreamRecordType = 3
	// It informs the receiver of the stream for the end of a 'getSnapshot'
	// query (all STATE records will be sent, but more UPDATEDELTA may follow).
	// It is missleading:
	// an END_OF_STREAM can be send in a steam, and the stream may then
	// continue being used (for UPDATEDELTA records).
	ResponseStreamRecord_END_OF_STREAM ResponseStreamRecord_StreamRecordType = 4
)

// Enum value maps for ResponseStreamRecord_StreamRecordType.
var (
	ResponseStreamRecord_StreamRecordType_name = map[int32]string{
		0: "UPDATEOP",
		1: "UPDATEDELTA",
		2: "STATE",
		3: "HEARTBEAT",
		4: "END_OF_STREAM",
	}
	ResponseStreamRecord_StreamRecordType_value = map[string]int32{
		"UPDATEOP":      0,
		"UPDATEDELTA":   1,
		"STATE":         2,
		"HEARTBEAT":     3,
		"END_OF_STREAM": 4,
	}
)

func (x ResponseStreamRecord_StreamRecordType) Enum() *ResponseStreamRecord_StreamRecordType {
	p := new(ResponseStreamRecord_StreamRecordType)
	*p = x
	return p
}

func (x ResponseStreamRecord_StreamRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStreamRecord_StreamRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_qpuapi_proto_enumTypes[1].Descriptor()
}

func (ResponseStreamRecord_StreamRecordType) Type() protoreflect.EnumType {
	return &file_qpuapi_proto_enumTypes[1]
}

func (x ResponseStreamRecord_StreamRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStreamRecord_StreamRecordType.Descriptor instead.
func (ResponseStreamRecord_StreamRecordType) EnumDescriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{8, 0}
}

type ConfigResponse_QPUType int32

const (
	ConfigResponse_DATASTORE_DRIVER ConfigResponse_QPUType = 0
	ConfigResponse_SUM              ConfigResponse_QPUType = 1
	ConfigResponse_JOIN             ConfigResponse_QPUType = 2
	ConfigResponse_INDEX            ConfigResponse_QPUType = 3
	ConfigResponse_CACHE            ConfigResponse_QPUType = 4
)

// Enum value maps for ConfigResponse_QPUType.
var (
	ConfigResponse_QPUType_name = map[int32]string{
		0: "DATASTORE_DRIVER",
		1: "SUM",
		2: "JOIN",
		3: "INDEX",
		4: "CACHE",
	}
	ConfigResponse_QPUType_value = map[string]int32{
		"DATASTORE_DRIVER": 0,
		"SUM":              1,
		"JOIN":             2,
		"INDEX":            3,
		"CACHE":            4,
	}
)

func (x ConfigResponse_QPUType) Enum() *ConfigResponse_QPUType {
	p := new(ConfigResponse_QPUType)
	*p = x
	return p
}

func (x ConfigResponse_QPUType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigResponse_QPUType) Descriptor() protoreflect.EnumDescriptor {
	return file_qpuapi_proto_enumTypes[2].Descriptor()
}

func (ConfigResponse_QPUType) Type() protoreflect.EnumType {
	return &file_qpuapi_proto_enumTypes[2]
}

func (x ConfigResponse_QPUType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigResponse_QPUType.Descriptor instead.
func (ConfigResponse_QPUType) EnumDescriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{11, 0}
}

type NoOpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *NoOpReq) Reset() {
	*x = NoOpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoOpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpReq) ProtoMessage() {}

func (x *NoOpReq) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpReq.ProtoReflect.Descriptor instead.
func (*NoOpReq) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{0}
}

func (x *NoOpReq) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

type NoOpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *NoOpResp) Reset() {
	*x = NoOpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoOpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpResp) ProtoMessage() {}

func (x *NoOpResp) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpResp.ProtoReflect.Descriptor instead.
func (*NoOpResp) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{1}
}

func (x *NoOpResp) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

type RequestStreamRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*RequestStreamRecord_QueryRequest
	//	*RequestStreamRecord_Ack
	Request isRequestStreamRecord_Request `protobuf_oneof:"request"`
}

func (x *RequestStreamRecord) Reset() {
	*x = RequestStreamRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStreamRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStreamRecord) ProtoMessage() {}

func (x *RequestStreamRecord) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStreamRecord.ProtoReflect.Descriptor instead.
func (*RequestStreamRecord) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{2}
}

func (m *RequestStreamRecord) GetRequest() isRequestStreamRecord_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RequestStreamRecord) GetQueryRequest() *QueryRequest {
	if x, ok := x.GetRequest().(*RequestStreamRecord_QueryRequest); ok {
		return x.QueryRequest
	}
	return nil
}

func (x *RequestStreamRecord) GetAck() *AckMsg {
	if x, ok := x.GetRequest().(*RequestStreamRecord_Ack); ok {
		return x.Ack
	}
	return nil
}

type isRequestStreamRecord_Request interface {
	isRequestStreamRecord_Request()
}

type RequestStreamRecord_QueryRequest struct {
	QueryRequest *QueryRequest `protobuf:"bytes,1,opt,name=queryRequest,proto3,oneof"`
}

type RequestStreamRecord_Ack struct {
	// Used to implement synchronous streams.
	// (synchronous stream : the sender blocks until it receives an ack for
	// each record)
	Ack *AckMsg `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*RequestStreamRecord_QueryRequest) isRequestStreamRecord_Request() {}

func (*RequestStreamRecord_Ack) isRequestStreamRecord_Request() {}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *Query            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Synchronous or asynhronous mode.
	// Only makes sence to use synchronous mode when the underlying datastore'
	// subscribe API has the ability to block updates waiting for acks.
	Sync                bool `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
	MeasureDataTransfer bool `protobuf:"varint,4,opt,name=measureDataTransfer,proto3" json:"measureDataTransfer,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{3}
}

func (x *QueryRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *QueryRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *QueryRequest) GetMeasureDataTransfer() bool {
	if x != nil {
		return x.MeasureDataTransfer
	}
	return false
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*Query_QueryAst
	//	*Query_QuerySql
	Query isQuery_Query `protobuf_oneof:"query"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{4}
}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *Query) GetQueryAst() *ASTQuery {
	if x, ok := x.GetQuery().(*Query_QueryAst); ok {
		return x.QueryAst
	}
	return nil
}

func (x *Query) GetQuerySql() *SQLQuery {
	if x, ok := x.GetQuery().(*Query_QuerySql); ok {
		return x.QuerySql
	}
	return nil
}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_QueryAst struct {
	QueryAst *ASTQuery `protobuf:"bytes,1,opt,name=query_ast,json=queryAst,proto3,oneof"`
}

type Query_QuerySql struct {
	QuerySql *SQLQuery `protobuf:"bytes,2,opt,name=query_sql,json=querySql,proto3,oneof"`
}

func (*Query_QueryAst) isQuery_Query() {}

func (*Query_QuerySql) isQuery_Query() {}

type SQLQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryStr string `protobuf:"bytes,1,opt,name=queryStr,proto3" json:"queryStr,omitempty"`
}

func (x *SQLQuery) Reset() {
	*x = SQLQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLQuery) ProtoMessage() {}

func (x *SQLQuery) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLQuery.ProtoReflect.Descriptor instead.
func (*SQLQuery) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{5}
}

func (x *SQLQuery) GetQueryStr() string {
	if x != nil {
		return x.QueryStr
	}
	return ""
}

// Internal query representation.
type ASTQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Like the SQL PROJECTION.
	Projection []string `protobuf:"bytes,2,rep,name=projection,proto3" json:"projection,omitempty"`
	// Like the SQL WHERE statement.
	Predicate []*qpu.AttributePredicate `protobuf:"bytes,3,rep,name=predicate,proto3" json:"predicate,omitempty"`
	// Timespamp predicate.
	// Has the same form as AttributePredicate, but it is separate simply
	// to allow as to refer to this with a specific name (tsPredicate).
	TsPredicate *qpu.SnapshotTimePredicate `protobuf:"bytes,4,opt,name=tsPredicate,proto3" json:"tsPredicate,omitempty"`
	OrderBy     *OrderBy                   `protobuf:"bytes,5,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	// Like the SQL LIMIT
	Limit int64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ASTQuery) Reset() {
	*x = ASTQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTQuery) ProtoMessage() {}

func (x *ASTQuery) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTQuery.ProtoReflect.Descriptor instead.
func (*ASTQuery) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{6}
}

func (x *ASTQuery) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ASTQuery) GetProjection() []string {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *ASTQuery) GetPredicate() []*qpu.AttributePredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *ASTQuery) GetTsPredicate() *qpu.SnapshotTimePredicate {
	if x != nil {
		return x.TsPredicate
	}
	return nil
}

func (x *ASTQuery) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ASTQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeName string        `protobuf:"bytes,1,opt,name=attributeName,proto3" json:"attributeName,omitempty"`
	Direction     OrderBy_Order `protobuf:"varint,2,opt,name=direction,proto3,enum=qpuapi.OrderBy_Order" json:"direction,omitempty"`
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{7}
}

func (x *OrderBy) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *OrderBy) GetDirection() OrderBy_Order {
	if x != nil {
		return x.Direction
	}
	return OrderBy_ASC
}

// A record for the stream returned by Query.
type ResponseStreamRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is here to be used for checking for gaps in the stream and for
	// ordering records per stream
	// (not yet implemented)
	SequenceId int64                                 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Type       ResponseStreamRecord_StreamRecordType `protobuf:"varint,2,opt,name=type,proto3,enum=qpuapi.ResponseStreamRecord_StreamRecordType" json:"type,omitempty"`
	LogOp      *qpu.LogOperation                     `protobuf:"bytes,3,opt,name=logOp,proto3" json:"logOp,omitempty"`
}

func (x *ResponseStreamRecord) Reset() {
	*x = ResponseStreamRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStreamRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStreamRecord) ProtoMessage() {}

func (x *ResponseStreamRecord) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStreamRecord.ProtoReflect.Descriptor instead.
func (*ResponseStreamRecord) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseStreamRecord) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ResponseStreamRecord) GetType() ResponseStreamRecord_StreamRecordType {
	if x != nil {
		return x.Type
	}
	return ResponseStreamRecord_UPDATEOP
}

func (x *ResponseStreamRecord) GetLogOp() *qpu.LogOperation {
	if x != nil {
		return x.LogOp
	}
	return nil
}

// Simplification of ResponseStreamRecord
// used for QueryUnary.
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*qpu.LogOperation `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{9}
}

func (x *QueryResponse) GetResults() []*qpu.LogOperation {
	if x != nil {
		return x.Results
	}
	return nil
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Just here for future use, not actually used.
	Clock *qpu.SnapshotTimePredicate `protobuf:"bytes,1,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigRequest) GetClock() *qpu.SnapshotTimePredicate {
	if x != nil {
		return x.Clock
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QpuType          ConfigResponse_QPUType    `protobuf:"varint,1,opt,name=qpu_type,json=qpuType,proto3,enum=qpuapi.ConfigResponse_QPUType" json:"qpu_type,omitempty"`
	Schema           []string                  `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty"`
	SupportedQueries []*qpu.AttributePredicate `protobuf:"bytes,3,rep,name=supportedQueries,proto3" json:"supportedQueries,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigResponse) GetQpuType() ConfigResponse_QPUType {
	if x != nil {
		return x.QpuType
	}
	return ConfigResponse_DATASTORE_DRIVER
}

func (x *ConfigResponse) GetSchema() []string {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ConfigResponse) GetSupportedQueries() []*qpu.AttributePredicate {
	if x != nil {
		return x.SupportedQueries
	}
	return nil
}

type AckMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *AckMsg) Reset() {
	*x = AckMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qpuapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMsg) ProtoMessage() {}

func (x *AckMsg) ProtoReflect() protoreflect.Message {
	mi := &file_qpuapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMsg.ProtoReflect.Descriptor instead.
func (*AckMsg) Descriptor() ([]byte, []int) {
	return file_qpuapi_proto_rawDescGZIP(), []int{12}
}

func (x *AckMsg) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

var File_qpuapi_proto protoreflect.FileDescriptor

var file_qpuapi_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x1a, 0x09, 0x71, 0x70, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x07, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x22,
	0x1c, 0x0a, 0x08, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x22, 0x80, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x70,
	0x75, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xf6, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x70, 0x75, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x53, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x71, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x71, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x26, 0x0a,
	0x08, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x41, 0x53, 0x54, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x70,
	0x75, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x74, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x70, 0x75, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x74, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80,
	0x01, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10,
	0x01, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x71, 0x70, 0x75, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x4f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x70, 0x75, 0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x4f, 0x70, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45,
	0x41, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x04, 0x22, 0x3c, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x70, 0x75, 0x2e,
	0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x70, 0x75, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xf2, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x71,
	0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x50, 0x55, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x71,
	0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x43,
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x70, 0x75, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x07, 0x51, 0x50, 0x55, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x04, 0x22, 0x29, 0x0a,
	0x06, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x32, 0xd3, 0x05, 0x0a, 0x06, 0x51, 0x50, 0x55,
	0x41, 0x50, 0x49, 0x12, 0x48, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x71,
	0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x71, 0x70, 0x75, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x39, 0x0a,
	0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x13, 0x2e, 0x71, 0x70,
	0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x31, 0x12, 0x13, 0x2e, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74,
	0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x71,
	0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x31, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x13, 0x2e, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74,
	0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x71,
	0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x71, 0x70,
	0x75, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x70, 0x75, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x19, 0x2e, 0x71, 0x70, 0x75,
	0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x19, 0x2e, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x4f, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x11, 0x4c, 0x6f, 0x62, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e,
	0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x71, 0x70, 0x75, 0x65,
	0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x4c, 0x6f, 0x62, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x71, 0x70, 0x75, 0x65,
	0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x4c, 0x6f, 0x62, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x71, 0x70, 0x75, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x76, 0x61,
	0x73, 0x69, 0x6c, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x75, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x70, 0x75,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_qpuapi_proto_rawDescOnce sync.Once
	file_qpuapi_proto_rawDescData = file_qpuapi_proto_rawDesc
)

func file_qpuapi_proto_rawDescGZIP() []byte {
	file_qpuapi_proto_rawDescOnce.Do(func() {
		file_qpuapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_qpuapi_proto_rawDescData)
	})
	return file_qpuapi_proto_rawDescData
}

var file_qpuapi_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_qpuapi_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_qpuapi_proto_goTypes = []interface{}{
	(OrderBy_Order)(0),                         // 0: qpuapi.OrderBy.Order
	(ResponseStreamRecord_StreamRecordType)(0), // 1: qpuapi.ResponseStreamRecord.StreamRecordType
	(ConfigResponse_QPUType)(0),                // 2: qpuapi.ConfigResponse.QPUType
	(*NoOpReq)(nil),                            // 3: qpuapi.NoOpReq
	(*NoOpResp)(nil),                           // 4: qpuapi.NoOpResp
	(*RequestStreamRecord)(nil),                // 5: qpuapi.RequestStreamRecord
	(*QueryRequest)(nil),                       // 6: qpuapi.QueryRequest
	(*Query)(nil),                              // 7: qpuapi.Query
	(*SQLQuery)(nil),                           // 8: qpuapi.SQLQuery
	(*ASTQuery)(nil),                           // 9: qpuapi.ASTQuery
	(*OrderBy)(nil),                            // 10: qpuapi.OrderBy
	(*ResponseStreamRecord)(nil),               // 11: qpuapi.ResponseStreamRecord
	(*QueryResponse)(nil),                      // 12: qpuapi.QueryResponse
	(*ConfigRequest)(nil),                      // 13: qpuapi.ConfigRequest
	(*ConfigResponse)(nil),                     // 14: qpuapi.ConfigResponse
	(*AckMsg)(nil),                             // 15: qpuapi.AckMsg
	nil,                                        // 16: qpuapi.QueryRequest.MetadataEntry
	(*qpu.AttributePredicate)(nil),             // 17: qpu.AttributePredicate
	(*qpu.SnapshotTimePredicate)(nil),          // 18: qpu.SnapshotTimePredicate
	(*qpu.LogOperation)(nil),                   // 19: qpu.LogOperation
	(*qpuextapi.QueryReq)(nil),                 // 20: qpuextapi.QueryReq
	(*qpuextapi.MetricsRequest)(nil),           // 21: qpuextapi.MetricsRequest
	(*qpuextapi.GetWriteLogReq)(nil),           // 22: qpuextapi.GetWriteLogReq
	(*qpuextapi.LobFrontpageReq)(nil),          // 23: qpuextapi.LobFrontpageReq
	(*qpuextapi.LobStoryVoteReq)(nil),          // 24: qpuextapi.LobStoryVoteReq
	(*qpuextapi.QueryResp)(nil),                // 25: qpuextapi.QueryResp
	(*qpuextapi.QueryResp1)(nil),               // 26: qpuextapi.QueryResp1
	(*qpuextapi.MetricsResponse)(nil),          // 27: qpuextapi.MetricsResponse
	(*qpuextapi.WriteLogOp)(nil),               // 28: qpuextapi.WriteLogOp
	(*qpuextapi.LobFrontpageResp)(nil),         // 29: qpuextapi.LobFrontpageResp
	(*qpuextapi.LobStoryVoteResp)(nil),         // 30: qpuextapi.LobStoryVoteResp
}
var file_qpuapi_proto_depIdxs = []int32{
	6,  // 0: qpuapi.RequestStreamRecord.queryRequest:type_name -> qpuapi.QueryRequest
	15, // 1: qpuapi.RequestStreamRecord.ack:type_name -> qpuapi.AckMsg
	7,  // 2: qpuapi.QueryRequest.query:type_name -> qpuapi.Query
	16, // 3: qpuapi.QueryRequest.metadata:type_name -> qpuapi.QueryRequest.MetadataEntry
	9,  // 4: qpuapi.Query.query_ast:type_name -> qpuapi.ASTQuery
	8,  // 5: qpuapi.Query.query_sql:type_name -> qpuapi.SQLQuery
	17, // 6: qpuapi.ASTQuery.predicate:type_name -> qpu.AttributePredicate
	18, // 7: qpuapi.ASTQuery.tsPredicate:type_name -> qpu.SnapshotTimePredicate
	10, // 8: qpuapi.ASTQuery.orderBy:type_name -> qpuapi.OrderBy
	0,  // 9: qpuapi.OrderBy.direction:type_name -> qpuapi.OrderBy.Order
	1,  // 10: qpuapi.ResponseStreamRecord.type:type_name -> qpuapi.ResponseStreamRecord.StreamRecordType
	19, // 11: qpuapi.ResponseStreamRecord.logOp:type_name -> qpu.LogOperation
	19, // 12: qpuapi.QueryResponse.results:type_name -> qpu.LogOperation
	18, // 13: qpuapi.ConfigRequest.clock:type_name -> qpu.SnapshotTimePredicate
	2,  // 14: qpuapi.ConfigResponse.qpu_type:type_name -> qpuapi.ConfigResponse.QPUType
	17, // 15: qpuapi.ConfigResponse.supportedQueries:type_name -> qpu.AttributePredicate
	5,  // 16: qpuapi.QPUAPI.Query:input_type -> qpuapi.RequestStreamRecord
	20, // 17: qpuapi.QPUAPI.QueryUnary:input_type -> qpuextapi.QueryReq
	20, // 18: qpuapi.QPUAPI.QueryUnary1:input_type -> qpuextapi.QueryReq
	20, // 19: qpuapi.QPUAPI.QuerySubscribe:input_type -> qpuextapi.QueryReq
	13, // 20: qpuapi.QPUAPI.GetConfig:input_type -> qpuapi.ConfigRequest
	21, // 21: qpuapi.QPUAPI.GetMetrics:input_type -> qpuextapi.MetricsRequest
	22, // 22: qpuapi.QPUAPI.GetWriteLog:input_type -> qpuextapi.GetWriteLogReq
	23, // 23: qpuapi.QPUAPI.LobstersFrontpage:input_type -> qpuextapi.LobFrontpageReq
	24, // 24: qpuapi.QPUAPI.LobstersStoryVote:input_type -> qpuextapi.LobStoryVoteReq
	24, // 25: qpuapi.QPUAPI.LobstersStoryVoteInsert:input_type -> qpuextapi.LobStoryVoteReq
	11, // 26: qpuapi.QPUAPI.Query:output_type -> qpuapi.ResponseStreamRecord
	25, // 27: qpuapi.QPUAPI.QueryUnary:output_type -> qpuextapi.QueryResp
	26, // 28: qpuapi.QPUAPI.QueryUnary1:output_type -> qpuextapi.QueryResp1
	11, // 29: qpuapi.QPUAPI.QuerySubscribe:output_type -> qpuapi.ResponseStreamRecord
	14, // 30: qpuapi.QPUAPI.GetConfig:output_type -> qpuapi.ConfigResponse
	27, // 31: qpuapi.QPUAPI.GetMetrics:output_type -> qpuextapi.MetricsResponse
	28, // 32: qpuapi.QPUAPI.GetWriteLog:output_type -> qpuextapi.WriteLogOp
	29, // 33: qpuapi.QPUAPI.LobstersFrontpage:output_type -> qpuextapi.LobFrontpageResp
	30, // 34: qpuapi.QPUAPI.LobstersStoryVote:output_type -> qpuextapi.LobStoryVoteResp
	30, // 35: qpuapi.QPUAPI.LobstersStoryVoteInsert:output_type -> qpuextapi.LobStoryVoteResp
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_qpuapi_proto_init() }
func file_qpuapi_proto_init() {
	if File_qpuapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_qpuapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoOpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoOpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStreamRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseStreamRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qpuapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_qpuapi_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RequestStreamRecord_QueryRequest)(nil),
		(*RequestStreamRecord_Ack)(nil),
	}
	file_qpuapi_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Query_QueryAst)(nil),
		(*Query_QuerySql)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qpuapi_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qpuapi_proto_goTypes,
		DependencyIndexes: file_qpuapi_proto_depIdxs,
		EnumInfos:         file_qpuapi_proto_enumTypes,
		MessageInfos:      file_qpuapi_proto_msgTypes,
	}.Build()
	File_qpuapi_proto = out.File
	file_qpuapi_proto_rawDesc = nil
	file_qpuapi_proto_goTypes = nil
	file_qpuapi_proto_depIdxs = nil
}
