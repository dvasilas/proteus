// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mysql.proto

package mysql

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublishUpdatesClient is the client API for PublishUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishUpdatesClient interface {
	SubscribeToUpdates(ctx context.Context, opts ...grpc.CallOption) (PublishUpdates_SubscribeToUpdatesClient, error)
}

type publishUpdatesClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishUpdatesClient(cc grpc.ClientConnInterface) PublishUpdatesClient {
	return &publishUpdatesClient{cc}
}

func (c *publishUpdatesClient) SubscribeToUpdates(ctx context.Context, opts ...grpc.CallOption) (PublishUpdates_SubscribeToUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublishUpdates_ServiceDesc.Streams[0], "/mysql.PublishUpdates/SubscribeToUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &publishUpdatesSubscribeToUpdatesClient{stream}
	return x, nil
}

type PublishUpdates_SubscribeToUpdatesClient interface {
	Send(*Request) error
	Recv() (*UpdateRecord, error)
	grpc.ClientStream
}

type publishUpdatesSubscribeToUpdatesClient struct {
	grpc.ClientStream
}

func (x *publishUpdatesSubscribeToUpdatesClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publishUpdatesSubscribeToUpdatesClient) Recv() (*UpdateRecord, error) {
	m := new(UpdateRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublishUpdatesServer is the server API for PublishUpdates service.
// All implementations must embed UnimplementedPublishUpdatesServer
// for forward compatibility
type PublishUpdatesServer interface {
	SubscribeToUpdates(PublishUpdates_SubscribeToUpdatesServer) error
	mustEmbedUnimplementedPublishUpdatesServer()
}

// UnimplementedPublishUpdatesServer must be embedded to have forward compatible implementations.
type UnimplementedPublishUpdatesServer struct {
}

func (UnimplementedPublishUpdatesServer) SubscribeToUpdates(PublishUpdates_SubscribeToUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToUpdates not implemented")
}
func (UnimplementedPublishUpdatesServer) mustEmbedUnimplementedPublishUpdatesServer() {}

// UnsafePublishUpdatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishUpdatesServer will
// result in compilation errors.
type UnsafePublishUpdatesServer interface {
	mustEmbedUnimplementedPublishUpdatesServer()
}

func RegisterPublishUpdatesServer(s grpc.ServiceRegistrar, srv PublishUpdatesServer) {
	s.RegisterService(&PublishUpdates_ServiceDesc, srv)
}

func _PublishUpdates_SubscribeToUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublishUpdatesServer).SubscribeToUpdates(&publishUpdatesSubscribeToUpdatesServer{stream})
}

type PublishUpdates_SubscribeToUpdatesServer interface {
	Send(*UpdateRecord) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type publishUpdatesSubscribeToUpdatesServer struct {
	grpc.ServerStream
}

func (x *publishUpdatesSubscribeToUpdatesServer) Send(m *UpdateRecord) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publishUpdatesSubscribeToUpdatesServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublishUpdates_ServiceDesc is the grpc.ServiceDesc for PublishUpdates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishUpdates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mysql.PublishUpdates",
	HandlerType: (*PublishUpdatesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToUpdates",
			Handler:       _PublishUpdates_SubscribeToUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mysql.proto",
}
