syntax = "proto3";

package qpuapi;
option go_package = "github.com/dvasilas/proteus/internal/proto/qpuapi";

import "qpu.proto";
import "qpuextapi.proto";

service QPUAPI {
  // The QPU Query API.
  rpc Query(stream RequestStreamRecord) returns (stream ResponseStreamRecord) {}
  // QueryUnary is a simplification of Query that returns a single response
  // instead of a stream.
  // It is used to simplify the client code for clients that have queries
  // that look like SELECT .. FROM .. WHERE .. LIMIT N
  // and so do not care about streaming anyways.
  rpc QueryUnary(qpuextapi.QueryReq) returns (qpuextapi.QueryResp) {}

  rpc QueryUnary1(qpuextapi.QueryReq) returns (qpuextapi.QueryResp1) {}

  rpc QuerySubscribe(qpuextapi.QueryReq) returns (stream ResponseStreamRecord) {}
  // The QPU GetConfig API.
  // Used by a 'parent' QPU to request the configuration and query processing
  // capabilities of a 'child` QPU.
  rpc GetConfig(ConfigRequest) returns (ConfigResponse) {}
  // QPUs implemement a mechanism for measuring the traffic between them
  // (each QPU measuring the total size of outbound messages)
  // GetDataTransfer was used for getting this measuremrents.
  // Disabled for now.
  // rpc GetDataTransfer(GetDataRequest) returns (DataTransferResponse) {}
  // rpc QueryNoOp(NoOpReq) returns (NoOpResp) {}
  // rpc QueryArgs(QueryRequest) returns (QueryResponse) {}
  rpc GetMetrics(qpuextapi.MetricsRequest) returns (qpuextapi.MetricsResponse) {}

  rpc GetWriteLog(qpuextapi.GetWriteLogReq) returns (stream qpuextapi.WriteLogOp) {}
}

message NoOpReq {
  string str = 1;
}

message NoOpResp {
  string str = 1;
}

message RequestStreamRecord {
  oneof request {
    QueryRequest queryRequest = 1;
    // Used to implement synchronous streams.
    // (synchronous stream : the sender blocks until it receives an ack for
    // each record)
    AckMsg ack = 2;
    // Used by traceroute-like utility, used to track the path of a
    // query/update through the QPU graph.
    // Disabled for now.
    // PingMsg ping = 3;
  }
}

message QueryRequest {
  Query query = 1;
  map<string, string> metadata = 2;
  // Synchronous or asynhronous mode.
  // Only makes sence to use synchronous mode when the underlying datastore'
  // subscribe API has the ability to block updates waiting for acks.
  bool sync = 3;
  bool measureDataTransfer = 4;
}

message Query {
  oneof query {
    ASTQuery query_ast = 1;
    SQLQuery query_sql = 2;
  }
}

message SQLQuery {
    string queryStr = 1;
}
  // Internal query representation.
message ASTQuery {
  string table = 1;
  // Like the SQL PROJECTION.
  repeated string projection = 2;
  // Like the SQL WHERE statement.
  repeated qpu.AttributePredicate predicate = 3;
  // Timespamp predicate.
  // Has the same form as AttributePredicate, but it is separate simply
  // to allow as to refer to this with a specific name (tsPredicate).
  qpu.SnapshotTimePredicate tsPredicate = 4;
  OrderBy orderBy = 5;
  // Like the SQL LIMIT
  int64 limit = 6;
}

message OrderBy {
  enum Order {
    ASC = 0;
    DESC = 1;
  }
  string attributeName = 1;
  Order direction = 2;
}

// A record for the stream returned by Query.
message ResponseStreamRecord {
  enum StreamRecordType {
      // Not used for now.
      UPDATEOP = 0;
      // Respresents an update.
      // udpate = (value_before_update, value_after_update)
      UPDATEDELTA = 1;
      // Represents the state of a data item.
      STATE = 2;
      // Sometimes we exchange heartbeats in long-lived streams to make sure
      // the two parts are still alive and the connection is open.
      HEARTBEAT = 3;
      // It informs the receiver of the stream for the end of a 'getSnapshot'
      // query (all STATE records will be sent, but more UPDATEDELTA may follow).
      // It is missleading:
      // an END_OF_STREAM can be send in a steam, and the stream may then
      // continue being used (for UPDATEDELTA records).
      END_OF_STREAM = 4;
    }
  // This is here to be used for checking for gaps in the stream and for
  // ordering records per stream
  // (not yet implemented)
  int64 sequence_id = 1;
  StreamRecordType type = 2;
  qpu.LogOperation logOp = 3;
}

// Simplification of ResponseStreamRecord
// used for QueryUnary.
message QueryResponse {
  repeated qpu.LogOperation results = 1;
}


message ConfigRequest {
  // Just here for future use, not actually used.
  qpu.SnapshotTimePredicate clock = 1;
}

message ConfigResponse {
  enum QPUType {
    DATASTORE_DRIVER = 0;
    SUM = 1;
    JOIN = 2;
    INDEX = 3;
    CACHE = 4;
  }
  QPUType qpu_type = 1;
  repeated string schema = 2;
  repeated qpu.AttributePredicate supportedQueries = 3;
}

message AckMsg {
  int64 sequence_id = 1;
}

// message PingMsg {
//   int64 sequence_id = 1;
// }

// message GetDataRequest{
// }

// message DataTransferResponse {
//   float kBytesTranferred = 1;
// }
